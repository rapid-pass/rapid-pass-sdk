/* tslint:disable */
/* eslint-disable */
/**
 * Rapid Pass API
 * API docs for Rapid Pass
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { RoleDto } from '../models';
/**
 * DiscordApi - axios parameter creator
 * @export
 */
export const DiscordApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a role to an integration
         * @param {string} integrationId 
         * @param {string} guildId 
         * @param {string} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        discordControllerAddRole: async (integrationId: string, guildId: string, roleId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'integrationId' is not null or undefined
            if (integrationId === null || integrationId === undefined) {
                throw new RequiredError('integrationId','Required parameter integrationId was null or undefined when calling discordControllerAddRole.');
            }
            // verify required parameter 'guildId' is not null or undefined
            if (guildId === null || guildId === undefined) {
                throw new RequiredError('guildId','Required parameter guildId was null or undefined when calling discordControllerAddRole.');
            }
            // verify required parameter 'roleId' is not null or undefined
            if (roleId === null || roleId === undefined) {
                throw new RequiredError('roleId','Required parameter roleId was null or undefined when calling discordControllerAddRole.');
            }
            const localVarPath = `/v1/discord/roles/{integrationId}/{guildId}/{roleId}`
                .replace(`{${"integrationId"}}`, encodeURIComponent(String(integrationId)))
                .replace(`{${"guildId"}}`, encodeURIComponent(String(guildId)))
                .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary View all roles for a server
         * @param {string} guildId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        discordControllerFetchAllRoles: async (guildId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guildId' is not null or undefined
            if (guildId === null || guildId === undefined) {
                throw new RequiredError('guildId','Required parameter guildId was null or undefined when calling discordControllerFetchAllRoles.');
            }
            const localVarPath = `/v1/discord/roles/guild/{guildId}`
                .replace(`{${"guildId"}}`, encodeURIComponent(String(guildId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Link Discord server to a merchant
         * @param {string} merchantId 
         * @param {string} code 
         * @param {string} guildId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        discordControllerHandleCallback: async (merchantId: string, code: string, guildId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'merchantId' is not null or undefined
            if (merchantId === null || merchantId === undefined) {
                throw new RequiredError('merchantId','Required parameter merchantId was null or undefined when calling discordControllerHandleCallback.');
            }
            // verify required parameter 'code' is not null or undefined
            if (code === null || code === undefined) {
                throw new RequiredError('code','Required parameter code was null or undefined when calling discordControllerHandleCallback.');
            }
            // verify required parameter 'guildId' is not null or undefined
            if (guildId === null || guildId === undefined) {
                throw new RequiredError('guildId','Required parameter guildId was null or undefined when calling discordControllerHandleCallback.');
            }
            const localVarPath = `/v1/discord/callback/{merchantId}`
                .replace(`{${"merchantId"}}`, encodeURIComponent(String(merchantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }

            if (guildId !== undefined) {
                localVarQueryParameter['guildId'] = guildId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a role
         * @param {string} integrationId 
         * @param {string} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        discordControllerRemoveRole: async (integrationId: string, roleId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'integrationId' is not null or undefined
            if (integrationId === null || integrationId === undefined) {
                throw new RequiredError('integrationId','Required parameter integrationId was null or undefined when calling discordControllerRemoveRole.');
            }
            // verify required parameter 'roleId' is not null or undefined
            if (roleId === null || roleId === undefined) {
                throw new RequiredError('roleId','Required parameter roleId was null or undefined when calling discordControllerRemoveRole.');
            }
            const localVarPath = `/v1/discord/roles/{integrationId}/{roleId}`
                .replace(`{${"integrationId"}}`, encodeURIComponent(String(integrationId)))
                .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DiscordApi - functional programming interface
 * @export
 */
export const DiscordApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a role to an integration
         * @param {string} integrationId 
         * @param {string} guildId 
         * @param {string} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async discordControllerAddRole(integrationId: string, guildId: string, roleId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await DiscordApiAxiosParamCreator(configuration).discordControllerAddRole(integrationId, guildId, roleId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary View all roles for a server
         * @param {string} guildId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async discordControllerFetchAllRoles(guildId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<RoleDto>>>> {
            const localVarAxiosArgs = await DiscordApiAxiosParamCreator(configuration).discordControllerFetchAllRoles(guildId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Link Discord server to a merchant
         * @param {string} merchantId 
         * @param {string} code 
         * @param {string} guildId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async discordControllerHandleCallback(merchantId: string, code: string, guildId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await DiscordApiAxiosParamCreator(configuration).discordControllerHandleCallback(merchantId, code, guildId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete a role
         * @param {string} integrationId 
         * @param {string} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async discordControllerRemoveRole(integrationId: string, roleId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await DiscordApiAxiosParamCreator(configuration).discordControllerRemoveRole(integrationId, roleId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DiscordApi - factory interface
 * @export
 */
export const DiscordApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Add a role to an integration
         * @param {string} integrationId 
         * @param {string} guildId 
         * @param {string} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async discordControllerAddRole(integrationId: string, guildId: string, roleId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return DiscordApiFp(configuration).discordControllerAddRole(integrationId, guildId, roleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary View all roles for a server
         * @param {string} guildId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async discordControllerFetchAllRoles(guildId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<RoleDto>>> {
            return DiscordApiFp(configuration).discordControllerFetchAllRoles(guildId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Link Discord server to a merchant
         * @param {string} merchantId 
         * @param {string} code 
         * @param {string} guildId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async discordControllerHandleCallback(merchantId: string, code: string, guildId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return DiscordApiFp(configuration).discordControllerHandleCallback(merchantId, code, guildId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a role
         * @param {string} integrationId 
         * @param {string} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async discordControllerRemoveRole(integrationId: string, roleId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return DiscordApiFp(configuration).discordControllerRemoveRole(integrationId, roleId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DiscordApi - object-oriented interface
 * @export
 * @class DiscordApi
 * @extends {BaseAPI}
 */
export class DiscordApi extends BaseAPI {
    /**
     * 
     * @summary Add a role to an integration
     * @param {string} integrationId 
     * @param {string} guildId 
     * @param {string} roleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscordApi
     */
    public async discordControllerAddRole(integrationId: string, guildId: string, roleId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return DiscordApiFp(this.configuration).discordControllerAddRole(integrationId, guildId, roleId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary View all roles for a server
     * @param {string} guildId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscordApi
     */
    public async discordControllerFetchAllRoles(guildId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<RoleDto>>> {
        return DiscordApiFp(this.configuration).discordControllerFetchAllRoles(guildId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Link Discord server to a merchant
     * @param {string} merchantId 
     * @param {string} code 
     * @param {string} guildId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscordApi
     */
    public async discordControllerHandleCallback(merchantId: string, code: string, guildId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return DiscordApiFp(this.configuration).discordControllerHandleCallback(merchantId, code, guildId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Delete a role
     * @param {string} integrationId 
     * @param {string} roleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscordApi
     */
    public async discordControllerRemoveRole(integrationId: string, roleId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return DiscordApiFp(this.configuration).discordControllerRemoveRole(integrationId, roleId, options).then((request) => request(this.axios, this.basePath));
    }
}
