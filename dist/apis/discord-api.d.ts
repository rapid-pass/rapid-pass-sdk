/**
 * Rapid Pass API
 * API docs for Rapid Pass
 *
 * OpenAPI spec version: 0.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { IntegrationDto } from '../models';
import { RoleDto } from '../models';
/**
 * DiscordApi - axios parameter creator
 * @export
 */
export declare const DiscordApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Add a role to an integration
     * @param {string} integrationId
     * @param {string} guildId
     * @param {string} roleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    discordControllerAddRole: (integrationId: string, guildId: string, roleId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary View all roles for a server
     * @param {string} guildId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    discordControllerFetchAllRoles: (guildId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary View specific role
     * @param {string} integrationId
     * @param {string} roleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    discordControllerFetchRole: (integrationId: string, roleId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Link Discord server to a merchant
     * @param {string} merchantId
     * @param {string} code
     * @param {string} guildId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    discordControllerHandleCallback: (merchantId: string, code: string, guildId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete a role
     * @param {string} integrationId
     * @param {string} roleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    discordControllerRemoveRole: (integrationId: string, roleId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DiscordApi - functional programming interface
 * @export
 */
export declare const DiscordApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Add a role to an integration
     * @param {string} integrationId
     * @param {string} guildId
     * @param {string} roleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    discordControllerAddRole(integrationId: string, guildId: string, roleId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>>;
    /**
     *
     * @summary View all roles for a server
     * @param {string} guildId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    discordControllerFetchAllRoles(guildId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<RoleDto>>>>;
    /**
     *
     * @summary View specific role
     * @param {string} integrationId
     * @param {string} roleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    discordControllerFetchRole(integrationId: string, roleId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RoleDto>>>;
    /**
     *
     * @summary Link Discord server to a merchant
     * @param {string} merchantId
     * @param {string} code
     * @param {string} guildId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    discordControllerHandleCallback(merchantId: string, code: string, guildId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<IntegrationDto>>>;
    /**
     *
     * @summary Delete a role
     * @param {string} integrationId
     * @param {string} roleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    discordControllerRemoveRole(integrationId: string, roleId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>>;
};
/**
 * DiscordApi - factory interface
 * @export
 */
export declare const DiscordApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Add a role to an integration
     * @param {string} integrationId
     * @param {string} guildId
     * @param {string} roleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    discordControllerAddRole(integrationId: string, guildId: string, roleId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
    /**
     *
     * @summary View all roles for a server
     * @param {string} guildId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    discordControllerFetchAllRoles(guildId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<RoleDto>>>;
    /**
     *
     * @summary View specific role
     * @param {string} integrationId
     * @param {string} roleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    discordControllerFetchRole(integrationId: string, roleId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<RoleDto>>;
    /**
     *
     * @summary Link Discord server to a merchant
     * @param {string} merchantId
     * @param {string} code
     * @param {string} guildId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    discordControllerHandleCallback(merchantId: string, code: string, guildId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<IntegrationDto>>;
    /**
     *
     * @summary Delete a role
     * @param {string} integrationId
     * @param {string} roleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    discordControllerRemoveRole(integrationId: string, roleId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
};
/**
 * DiscordApi - object-oriented interface
 * @export
 * @class DiscordApi
 * @extends {BaseAPI}
 */
export declare class DiscordApi extends BaseAPI {
    /**
     *
     * @summary Add a role to an integration
     * @param {string} integrationId
     * @param {string} guildId
     * @param {string} roleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscordApi
     */
    discordControllerAddRole(integrationId: string, guildId: string, roleId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
    /**
     *
     * @summary View all roles for a server
     * @param {string} guildId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscordApi
     */
    discordControllerFetchAllRoles(guildId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<RoleDto>>>;
    /**
     *
     * @summary View specific role
     * @param {string} integrationId
     * @param {string} roleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscordApi
     */
    discordControllerFetchRole(integrationId: string, roleId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<RoleDto>>;
    /**
     *
     * @summary Link Discord server to a merchant
     * @param {string} merchantId
     * @param {string} code
     * @param {string} guildId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscordApi
     */
    discordControllerHandleCallback(merchantId: string, code: string, guildId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<IntegrationDto>>;
    /**
     *
     * @summary Delete a role
     * @param {string} integrationId
     * @param {string} roleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscordApi
     */
    discordControllerRemoveRole(integrationId: string, roleId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
}
