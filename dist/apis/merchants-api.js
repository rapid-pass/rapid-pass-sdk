"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Rapid Pass API
 * API docs for Rapid Pass
 *
 * OpenAPI spec version: 0.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MerchantsApi = exports.MerchantsApiFactory = exports.MerchantsApiFp = exports.MerchantsApiAxiosParamCreator = void 0;
var axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
var base_1 = require("../base");
/**
 * MerchantsApi - axios parameter creator
 * @export
 */
var MerchantsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Create a link for a plan
         * @param {CreateLinkDto} body
         * @param {string} merchantId
         * @param {string} productId
         * @param {string} planId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardControllerCreateLink: function (body, merchantId, productId, planId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, accessToken, _a, query, key, key, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            // verify required parameter 'body' is not null or undefined
                            if (body === null || body === undefined) {
                                throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling dashboardControllerCreateLink.');
                            }
                            // verify required parameter 'merchantId' is not null or undefined
                            if (merchantId === null || merchantId === undefined) {
                                throw new base_1.RequiredError('merchantId', 'Required parameter merchantId was null or undefined when calling dashboardControllerCreateLink.');
                            }
                            // verify required parameter 'productId' is not null or undefined
                            if (productId === null || productId === undefined) {
                                throw new base_1.RequiredError('productId', 'Required parameter productId was null or undefined when calling dashboardControllerCreateLink.');
                            }
                            // verify required parameter 'planId' is not null or undefined
                            if (planId === null || planId === undefined) {
                                throw new base_1.RequiredError('planId', 'Required parameter planId was null or undefined when calling dashboardControllerCreateLink.');
                            }
                            localVarPath = "/v1/dashboard/merchants/{merchantId}/products/{productId}/plans/{planId}/links"
                                .replace("{".concat("merchantId", "}"), encodeURIComponent(String(merchantId)))
                                .replace("{".concat("productId", "}"), encodeURIComponent(String(productId)))
                                .replace("{".concat("planId", "}"), encodeURIComponent(String(planId)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 5];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.accessToken()];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.accessToken];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            accessToken = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
                            _b.label = 5;
                        case 5:
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            query = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                query.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.params) {
                                query.set(key, options.params[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(query)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Create merchant FAQ info
         * @param {UpsertFaqDto} body
         * @param {string} merchantId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardControllerCreateMerchantFaq: function (body, merchantId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, accessToken, _a, query, key, key, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            // verify required parameter 'body' is not null or undefined
                            if (body === null || body === undefined) {
                                throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling dashboardControllerCreateMerchantFaq.');
                            }
                            // verify required parameter 'merchantId' is not null or undefined
                            if (merchantId === null || merchantId === undefined) {
                                throw new base_1.RequiredError('merchantId', 'Required parameter merchantId was null or undefined when calling dashboardControllerCreateMerchantFaq.');
                            }
                            localVarPath = "/v1/dashboard/merchants/{merchantId}/faq"
                                .replace("{".concat("merchantId", "}"), encodeURIComponent(String(merchantId)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 5];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.accessToken()];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.accessToken];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            accessToken = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
                            _b.label = 5;
                        case 5:
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            query = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                query.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.params) {
                                query.set(key, options.params[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(query)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Create a plan for a product
         * @param {CreatePlanDto} body
         * @param {string} merchantId
         * @param {string} productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardControllerCreatePlan: function (body, merchantId, productId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, accessToken, _a, query, key, key, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            // verify required parameter 'body' is not null or undefined
                            if (body === null || body === undefined) {
                                throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling dashboardControllerCreatePlan.');
                            }
                            // verify required parameter 'merchantId' is not null or undefined
                            if (merchantId === null || merchantId === undefined) {
                                throw new base_1.RequiredError('merchantId', 'Required parameter merchantId was null or undefined when calling dashboardControllerCreatePlan.');
                            }
                            // verify required parameter 'productId' is not null or undefined
                            if (productId === null || productId === undefined) {
                                throw new base_1.RequiredError('productId', 'Required parameter productId was null or undefined when calling dashboardControllerCreatePlan.');
                            }
                            localVarPath = "/v1/dashboard/merchants/{merchantId}/products/{productId}/plans"
                                .replace("{".concat("merchantId", "}"), encodeURIComponent(String(merchantId)))
                                .replace("{".concat("productId", "}"), encodeURIComponent(String(productId)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 5];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.accessToken()];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.accessToken];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            accessToken = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
                            _b.label = 5;
                        case 5:
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            query = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                query.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.params) {
                                query.set(key, options.params[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(query)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Create new product for a merchant
         * @param {CreateProductDto} body
         * @param {string} merchantId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardControllerCreateProduct: function (body, merchantId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, accessToken, _a, query, key, key, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            // verify required parameter 'body' is not null or undefined
                            if (body === null || body === undefined) {
                                throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling dashboardControllerCreateProduct.');
                            }
                            // verify required parameter 'merchantId' is not null or undefined
                            if (merchantId === null || merchantId === undefined) {
                                throw new base_1.RequiredError('merchantId', 'Required parameter merchantId was null or undefined when calling dashboardControllerCreateProduct.');
                            }
                            localVarPath = "/v1/dashboard/merchants/{merchantId}/products"
                                .replace("{".concat("merchantId", "}"), encodeURIComponent(String(merchantId)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 5];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.accessToken()];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.accessToken];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            accessToken = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
                            _b.label = 5;
                        case 5:
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            query = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                query.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.params) {
                                query.set(key, options.params[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(query)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete merchant FAQ info
         * @param {string} merchantId
         * @param {string} faqId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardControllerDeleteMerchantFaq: function (merchantId, faqId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, accessToken, _a, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            // verify required parameter 'merchantId' is not null or undefined
                            if (merchantId === null || merchantId === undefined) {
                                throw new base_1.RequiredError('merchantId', 'Required parameter merchantId was null or undefined when calling dashboardControllerDeleteMerchantFaq.');
                            }
                            // verify required parameter 'faqId' is not null or undefined
                            if (faqId === null || faqId === undefined) {
                                throw new base_1.RequiredError('faqId', 'Required parameter faqId was null or undefined when calling dashboardControllerDeleteMerchantFaq.');
                            }
                            localVarPath = "/v1/dashboard/merchants/{merchantId}/faq/{faqId}"
                                .replace("{".concat("merchantId", "}"), encodeURIComponent(String(merchantId)))
                                .replace("{".concat("faqId", "}"), encodeURIComponent(String(faqId)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 5];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.accessToken()];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.accessToken];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            accessToken = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
                            _b.label = 5;
                        case 5:
                            query = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                query.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.params) {
                                query.set(key, options.params[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(query)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get all integrations for a merchant
         * @param {string} merchantId
         * @param {number} [page] Page number for pagination
         * @param {number} [limit] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardControllerGetAllIntegrations: function (merchantId, page, limit, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, accessToken, _a, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            // verify required parameter 'merchantId' is not null or undefined
                            if (merchantId === null || merchantId === undefined) {
                                throw new base_1.RequiredError('merchantId', 'Required parameter merchantId was null or undefined when calling dashboardControllerGetAllIntegrations.');
                            }
                            localVarPath = "/v1/dashboard/merchants/{merchantId}/integrations"
                                .replace("{".concat("merchantId", "}"), encodeURIComponent(String(merchantId)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 5];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.accessToken()];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.accessToken];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            accessToken = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
                            _b.label = 5;
                        case 5:
                            if (page !== undefined) {
                                localVarQueryParameter['page'] = page;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            query = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                query.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.params) {
                                query.set(key, options.params[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(query)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get all links for a merchant
         * @param {string} merchantId
         * @param {number} [page] Page number for pagination
         * @param {number} [limit] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardControllerGetAllLinks: function (merchantId, page, limit, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, accessToken, _a, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            // verify required parameter 'merchantId' is not null or undefined
                            if (merchantId === null || merchantId === undefined) {
                                throw new base_1.RequiredError('merchantId', 'Required parameter merchantId was null or undefined when calling dashboardControllerGetAllLinks.');
                            }
                            localVarPath = "/v1/dashboard/merchants/{merchantId}/links"
                                .replace("{".concat("merchantId", "}"), encodeURIComponent(String(merchantId)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 5];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.accessToken()];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.accessToken];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            accessToken = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
                            _b.label = 5;
                        case 5:
                            if (page !== undefined) {
                                localVarQueryParameter['page'] = page;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            query = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                query.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.params) {
                                query.set(key, options.params[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(query)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get specific integration for a merchant
         * @param {string} merchantId
         * @param {string} integrationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardControllerGetIntegration: function (merchantId, integrationId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, accessToken, _a, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            // verify required parameter 'merchantId' is not null or undefined
                            if (merchantId === null || merchantId === undefined) {
                                throw new base_1.RequiredError('merchantId', 'Required parameter merchantId was null or undefined when calling dashboardControllerGetIntegration.');
                            }
                            // verify required parameter 'integrationId' is not null or undefined
                            if (integrationId === null || integrationId === undefined) {
                                throw new base_1.RequiredError('integrationId', 'Required parameter integrationId was null or undefined when calling dashboardControllerGetIntegration.');
                            }
                            localVarPath = "/v1/dashboard/merchants/{merchantId}/integrations/{integrationId}"
                                .replace("{".concat("merchantId", "}"), encodeURIComponent(String(merchantId)))
                                .replace("{".concat("integrationId", "}"), encodeURIComponent(String(integrationId)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 5];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.accessToken()];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.accessToken];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            accessToken = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
                            _b.label = 5;
                        case 5:
                            query = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                query.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.params) {
                                query.set(key, options.params[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(query)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get a specific link for a plan
         * @param {string} merchantId
         * @param {string} productId
         * @param {string} planId
         * @param {string} linkId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardControllerGetLink: function (merchantId, productId, planId, linkId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, accessToken, _a, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            // verify required parameter 'merchantId' is not null or undefined
                            if (merchantId === null || merchantId === undefined) {
                                throw new base_1.RequiredError('merchantId', 'Required parameter merchantId was null or undefined when calling dashboardControllerGetLink.');
                            }
                            // verify required parameter 'productId' is not null or undefined
                            if (productId === null || productId === undefined) {
                                throw new base_1.RequiredError('productId', 'Required parameter productId was null or undefined when calling dashboardControllerGetLink.');
                            }
                            // verify required parameter 'planId' is not null or undefined
                            if (planId === null || planId === undefined) {
                                throw new base_1.RequiredError('planId', 'Required parameter planId was null or undefined when calling dashboardControllerGetLink.');
                            }
                            // verify required parameter 'linkId' is not null or undefined
                            if (linkId === null || linkId === undefined) {
                                throw new base_1.RequiredError('linkId', 'Required parameter linkId was null or undefined when calling dashboardControllerGetLink.');
                            }
                            localVarPath = "/v1/dashboard/merchants/{merchantId}/products/{productId}/plans/{planId}/links/{linkId}"
                                .replace("{".concat("merchantId", "}"), encodeURIComponent(String(merchantId)))
                                .replace("{".concat("productId", "}"), encodeURIComponent(String(productId)))
                                .replace("{".concat("planId", "}"), encodeURIComponent(String(planId)))
                                .replace("{".concat("linkId", "}"), encodeURIComponent(String(linkId)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 5];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.accessToken()];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.accessToken];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            accessToken = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
                            _b.label = 5;
                        case 5:
                            query = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                query.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.params) {
                                query.set(key, options.params[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(query)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get all links for a plan
         * @param {string} merchantId
         * @param {string} productId
         * @param {string} planId
         * @param {number} [page] Page number for pagination
         * @param {number} [limit] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardControllerGetLinks: function (merchantId, productId, planId, page, limit, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, accessToken, _a, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            // verify required parameter 'merchantId' is not null or undefined
                            if (merchantId === null || merchantId === undefined) {
                                throw new base_1.RequiredError('merchantId', 'Required parameter merchantId was null or undefined when calling dashboardControllerGetLinks.');
                            }
                            // verify required parameter 'productId' is not null or undefined
                            if (productId === null || productId === undefined) {
                                throw new base_1.RequiredError('productId', 'Required parameter productId was null or undefined when calling dashboardControllerGetLinks.');
                            }
                            // verify required parameter 'planId' is not null or undefined
                            if (planId === null || planId === undefined) {
                                throw new base_1.RequiredError('planId', 'Required parameter planId was null or undefined when calling dashboardControllerGetLinks.');
                            }
                            localVarPath = "/v1/dashboard/merchants/{merchantId}/products/{productId}/plans/{planId}/links"
                                .replace("{".concat("merchantId", "}"), encodeURIComponent(String(merchantId)))
                                .replace("{".concat("productId", "}"), encodeURIComponent(String(productId)))
                                .replace("{".concat("planId", "}"), encodeURIComponent(String(planId)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 5];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.accessToken()];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.accessToken];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            accessToken = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
                            _b.label = 5;
                        case 5:
                            if (page !== undefined) {
                                localVarQueryParameter['page'] = page;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            query = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                query.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.params) {
                                query.set(key, options.params[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(query)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get merchant info
         * @param {string} merchantId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardControllerGetMerchant: function (merchantId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, accessToken, _a, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            // verify required parameter 'merchantId' is not null or undefined
                            if (merchantId === null || merchantId === undefined) {
                                throw new base_1.RequiredError('merchantId', 'Required parameter merchantId was null or undefined when calling dashboardControllerGetMerchant.');
                            }
                            localVarPath = "/v1/dashboard/merchants/{merchantId}"
                                .replace("{".concat("merchantId", "}"), encodeURIComponent(String(merchantId)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 5];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.accessToken()];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.accessToken];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            accessToken = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
                            _b.label = 5;
                        case 5:
                            query = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                query.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.params) {
                                query.set(key, options.params[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(query)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get all plans for a product
         * @param {string} merchantId
         * @param {string} productId
         * @param {number} [page] Page number for pagination
         * @param {number} [limit] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardControllerGetPlans: function (merchantId, productId, page, limit, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, accessToken, _a, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            // verify required parameter 'merchantId' is not null or undefined
                            if (merchantId === null || merchantId === undefined) {
                                throw new base_1.RequiredError('merchantId', 'Required parameter merchantId was null or undefined when calling dashboardControllerGetPlans.');
                            }
                            // verify required parameter 'productId' is not null or undefined
                            if (productId === null || productId === undefined) {
                                throw new base_1.RequiredError('productId', 'Required parameter productId was null or undefined when calling dashboardControllerGetPlans.');
                            }
                            localVarPath = "/v1/dashboard/merchants/{merchantId}/products/{productId}/plans"
                                .replace("{".concat("merchantId", "}"), encodeURIComponent(String(merchantId)))
                                .replace("{".concat("productId", "}"), encodeURIComponent(String(productId)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 5];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.accessToken()];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.accessToken];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            accessToken = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
                            _b.label = 5;
                        case 5:
                            if (page !== undefined) {
                                localVarQueryParameter['page'] = page;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            query = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                query.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.params) {
                                query.set(key, options.params[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(query)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get a specific product
         * @param {string} merchantId
         * @param {string} productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardControllerGetProduct: function (merchantId, productId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, accessToken, _a, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            // verify required parameter 'merchantId' is not null or undefined
                            if (merchantId === null || merchantId === undefined) {
                                throw new base_1.RequiredError('merchantId', 'Required parameter merchantId was null or undefined when calling dashboardControllerGetProduct.');
                            }
                            // verify required parameter 'productId' is not null or undefined
                            if (productId === null || productId === undefined) {
                                throw new base_1.RequiredError('productId', 'Required parameter productId was null or undefined when calling dashboardControllerGetProduct.');
                            }
                            localVarPath = "/v1/dashboard/merchants/{merchantId}/products/{productId}"
                                .replace("{".concat("merchantId", "}"), encodeURIComponent(String(merchantId)))
                                .replace("{".concat("productId", "}"), encodeURIComponent(String(productId)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 5];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.accessToken()];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.accessToken];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            accessToken = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
                            _b.label = 5;
                        case 5:
                            query = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                query.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.params) {
                                query.set(key, options.params[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(query)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get products owned by a merchant
         * @param {string} merchantId
         * @param {number} [page] Page number for pagination
         * @param {number} [limit] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardControllerGetProducts: function (merchantId, page, limit, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, accessToken, _a, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            // verify required parameter 'merchantId' is not null or undefined
                            if (merchantId === null || merchantId === undefined) {
                                throw new base_1.RequiredError('merchantId', 'Required parameter merchantId was null or undefined when calling dashboardControllerGetProducts.');
                            }
                            localVarPath = "/v1/dashboard/merchants/{merchantId}/products"
                                .replace("{".concat("merchantId", "}"), encodeURIComponent(String(merchantId)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 5];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.accessToken()];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.accessToken];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            accessToken = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
                            _b.label = 5;
                        case 5:
                            if (page !== undefined) {
                                localVarQueryParameter['page'] = page;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            query = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                query.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.params) {
                                query.set(key, options.params[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(query)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Update specific integration for a merchant
         * @param {UpdateIntegrationDto} body
         * @param {string} merchantId
         * @param {string} integrationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardControllerUpdateIntegration: function (body, merchantId, integrationId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, accessToken, _a, query, key, key, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            // verify required parameter 'body' is not null or undefined
                            if (body === null || body === undefined) {
                                throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling dashboardControllerUpdateIntegration.');
                            }
                            // verify required parameter 'merchantId' is not null or undefined
                            if (merchantId === null || merchantId === undefined) {
                                throw new base_1.RequiredError('merchantId', 'Required parameter merchantId was null or undefined when calling dashboardControllerUpdateIntegration.');
                            }
                            // verify required parameter 'integrationId' is not null or undefined
                            if (integrationId === null || integrationId === undefined) {
                                throw new base_1.RequiredError('integrationId', 'Required parameter integrationId was null or undefined when calling dashboardControllerUpdateIntegration.');
                            }
                            localVarPath = "/v1/dashboard/merchants/{merchantId}/integrations/{integrationId}"
                                .replace("{".concat("merchantId", "}"), encodeURIComponent(String(merchantId)))
                                .replace("{".concat("integrationId", "}"), encodeURIComponent(String(integrationId)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 5];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.accessToken()];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.accessToken];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            accessToken = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
                            _b.label = 5;
                        case 5:
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            query = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                query.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.params) {
                                query.set(key, options.params[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(query)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Update merchant info
         * @param {UpdateMerchantDto} body
         * @param {string} merchantId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardControllerUpdateMerchant: function (body, merchantId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, accessToken, _a, query, key, key, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            // verify required parameter 'body' is not null or undefined
                            if (body === null || body === undefined) {
                                throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling dashboardControllerUpdateMerchant.');
                            }
                            // verify required parameter 'merchantId' is not null or undefined
                            if (merchantId === null || merchantId === undefined) {
                                throw new base_1.RequiredError('merchantId', 'Required parameter merchantId was null or undefined when calling dashboardControllerUpdateMerchant.');
                            }
                            localVarPath = "/v1/dashboard/merchants/{merchantId}"
                                .replace("{".concat("merchantId", "}"), encodeURIComponent(String(merchantId)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 5];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.accessToken()];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.accessToken];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            accessToken = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
                            _b.label = 5;
                        case 5:
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            query = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                query.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.params) {
                                query.set(key, options.params[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(query)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Update merchant FAQ info
         * @param {UpsertFaqDto} body
         * @param {string} merchantId
         * @param {string} faqId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardControllerUpdateMerchantFaq: function (body, merchantId, faqId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, accessToken, _a, query, key, key, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            // verify required parameter 'body' is not null or undefined
                            if (body === null || body === undefined) {
                                throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling dashboardControllerUpdateMerchantFaq.');
                            }
                            // verify required parameter 'merchantId' is not null or undefined
                            if (merchantId === null || merchantId === undefined) {
                                throw new base_1.RequiredError('merchantId', 'Required parameter merchantId was null or undefined when calling dashboardControllerUpdateMerchantFaq.');
                            }
                            // verify required parameter 'faqId' is not null or undefined
                            if (faqId === null || faqId === undefined) {
                                throw new base_1.RequiredError('faqId', 'Required parameter faqId was null or undefined when calling dashboardControllerUpdateMerchantFaq.');
                            }
                            localVarPath = "/v1/dashboard/merchants/{merchantId}/faq/{faqId}"
                                .replace("{".concat("merchantId", "}"), encodeURIComponent(String(merchantId)))
                                .replace("{".concat("faqId", "}"), encodeURIComponent(String(faqId)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 5];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.accessToken()];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.accessToken];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            accessToken = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
                            _b.label = 5;
                        case 5:
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            query = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                query.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.params) {
                                query.set(key, options.params[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(query)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Upsert merchant social media info
         * @param {UpsertSocialMediaDto} body
         * @param {string} merchantId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardControllerUpsertMerchantSocials: function (body, merchantId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, accessToken, _a, query, key, key, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            // verify required parameter 'body' is not null or undefined
                            if (body === null || body === undefined) {
                                throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling dashboardControllerUpsertMerchantSocials.');
                            }
                            // verify required parameter 'merchantId' is not null or undefined
                            if (merchantId === null || merchantId === undefined) {
                                throw new base_1.RequiredError('merchantId', 'Required parameter merchantId was null or undefined when calling dashboardControllerUpsertMerchantSocials.');
                            }
                            localVarPath = "/v1/dashboard/merchants/{merchantId}/socials"
                                .replace("{".concat("merchantId", "}"), encodeURIComponent(String(merchantId)));
                            localVarUrlObj = new URL(localVarPath, 'https://example.com');
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            if (!(configuration && configuration.accessToken)) return [3 /*break*/, 5];
                            if (!(typeof configuration.accessToken === 'function')) return [3 /*break*/, 2];
                            return [4 /*yield*/, configuration.accessToken()];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, configuration.accessToken];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            accessToken = _a;
                            localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
                            _b.label = 5;
                        case 5:
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            query = new URLSearchParams(localVarUrlObj.search);
                            for (key in localVarQueryParameter) {
                                query.set(key, localVarQueryParameter[key]);
                            }
                            for (key in options.params) {
                                query.set(key, options.params[key]);
                            }
                            localVarUrlObj.search = (new URLSearchParams(query)).toString();
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                            return [2 /*return*/, {
                                    url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get merchant info
         * @param {string} slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantsControllerGetMerchant: function (slug, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'slug' is not null or undefined
                    if (slug === null || slug === undefined) {
                        throw new base_1.RequiredError('slug', 'Required parameter slug was null or undefined when calling merchantsControllerGetMerchant.');
                    }
                    localVarPath = "/v1/merchants/{slug}"
                        .replace("{".concat("slug", "}"), encodeURIComponent(String(slug)));
                    localVarUrlObj = new URL(localVarPath, 'https://example.com');
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    query = new URLSearchParams(localVarUrlObj.search);
                    for (key in localVarQueryParameter) {
                        query.set(key, localVarQueryParameter[key]);
                    }
                    for (key in options.params) {
                        query.set(key, options.params[key]);
                    }
                    localVarUrlObj.search = (new URLSearchParams(query)).toString();
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Get slug availablity
         * @param {string} slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantsControllerGetSlug: function (slug, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'slug' is not null or undefined
                    if (slug === null || slug === undefined) {
                        throw new base_1.RequiredError('slug', 'Required parameter slug was null or undefined when calling merchantsControllerGetSlug.');
                    }
                    localVarPath = "/v1/merchants/slug/{slug}"
                        .replace("{".concat("slug", "}"), encodeURIComponent(String(slug)));
                    localVarUrlObj = new URL(localVarPath, 'https://example.com');
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    query = new URLSearchParams(localVarUrlObj.search);
                    for (key in localVarQueryParameter) {
                        query.set(key, localVarQueryParameter[key]);
                    }
                    for (key in options.params) {
                        query.set(key, options.params[key]);
                    }
                    localVarUrlObj.search = (new URLSearchParams(query)).toString();
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.MerchantsApiAxiosParamCreator = MerchantsApiAxiosParamCreator;
/**
 * MerchantsApi - functional programming interface
 * @export
 */
var MerchantsApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Create a link for a plan
         * @param {CreateLinkDto} body
         * @param {string} merchantId
         * @param {string} productId
         * @param {string} planId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardControllerCreateLink: function (body, merchantId, productId, planId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.MerchantsApiAxiosParamCreator)(configuration).dashboardControllerCreateLink(body, merchantId, productId, planId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Create merchant FAQ info
         * @param {UpsertFaqDto} body
         * @param {string} merchantId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardControllerCreateMerchantFaq: function (body, merchantId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.MerchantsApiAxiosParamCreator)(configuration).dashboardControllerCreateMerchantFaq(body, merchantId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Create a plan for a product
         * @param {CreatePlanDto} body
         * @param {string} merchantId
         * @param {string} productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardControllerCreatePlan: function (body, merchantId, productId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.MerchantsApiAxiosParamCreator)(configuration).dashboardControllerCreatePlan(body, merchantId, productId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Create new product for a merchant
         * @param {CreateProductDto} body
         * @param {string} merchantId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardControllerCreateProduct: function (body, merchantId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.MerchantsApiAxiosParamCreator)(configuration).dashboardControllerCreateProduct(body, merchantId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete merchant FAQ info
         * @param {string} merchantId
         * @param {string} faqId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardControllerDeleteMerchantFaq: function (merchantId, faqId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.MerchantsApiAxiosParamCreator)(configuration).dashboardControllerDeleteMerchantFaq(merchantId, faqId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get all integrations for a merchant
         * @param {string} merchantId
         * @param {number} [page] Page number for pagination
         * @param {number} [limit] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardControllerGetAllIntegrations: function (merchantId, page, limit, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.MerchantsApiAxiosParamCreator)(configuration).dashboardControllerGetAllIntegrations(merchantId, page, limit, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get all links for a merchant
         * @param {string} merchantId
         * @param {number} [page] Page number for pagination
         * @param {number} [limit] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardControllerGetAllLinks: function (merchantId, page, limit, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.MerchantsApiAxiosParamCreator)(configuration).dashboardControllerGetAllLinks(merchantId, page, limit, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get specific integration for a merchant
         * @param {string} merchantId
         * @param {string} integrationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardControllerGetIntegration: function (merchantId, integrationId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.MerchantsApiAxiosParamCreator)(configuration).dashboardControllerGetIntegration(merchantId, integrationId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get a specific link for a plan
         * @param {string} merchantId
         * @param {string} productId
         * @param {string} planId
         * @param {string} linkId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardControllerGetLink: function (merchantId, productId, planId, linkId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.MerchantsApiAxiosParamCreator)(configuration).dashboardControllerGetLink(merchantId, productId, planId, linkId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get all links for a plan
         * @param {string} merchantId
         * @param {string} productId
         * @param {string} planId
         * @param {number} [page] Page number for pagination
         * @param {number} [limit] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardControllerGetLinks: function (merchantId, productId, planId, page, limit, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.MerchantsApiAxiosParamCreator)(configuration).dashboardControllerGetLinks(merchantId, productId, planId, page, limit, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get merchant info
         * @param {string} merchantId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardControllerGetMerchant: function (merchantId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.MerchantsApiAxiosParamCreator)(configuration).dashboardControllerGetMerchant(merchantId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get all plans for a product
         * @param {string} merchantId
         * @param {string} productId
         * @param {number} [page] Page number for pagination
         * @param {number} [limit] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardControllerGetPlans: function (merchantId, productId, page, limit, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.MerchantsApiAxiosParamCreator)(configuration).dashboardControllerGetPlans(merchantId, productId, page, limit, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get a specific product
         * @param {string} merchantId
         * @param {string} productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardControllerGetProduct: function (merchantId, productId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.MerchantsApiAxiosParamCreator)(configuration).dashboardControllerGetProduct(merchantId, productId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get products owned by a merchant
         * @param {string} merchantId
         * @param {number} [page] Page number for pagination
         * @param {number} [limit] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardControllerGetProducts: function (merchantId, page, limit, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.MerchantsApiAxiosParamCreator)(configuration).dashboardControllerGetProducts(merchantId, page, limit, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Update specific integration for a merchant
         * @param {UpdateIntegrationDto} body
         * @param {string} merchantId
         * @param {string} integrationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardControllerUpdateIntegration: function (body, merchantId, integrationId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.MerchantsApiAxiosParamCreator)(configuration).dashboardControllerUpdateIntegration(body, merchantId, integrationId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Update merchant info
         * @param {UpdateMerchantDto} body
         * @param {string} merchantId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardControllerUpdateMerchant: function (body, merchantId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.MerchantsApiAxiosParamCreator)(configuration).dashboardControllerUpdateMerchant(body, merchantId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Update merchant FAQ info
         * @param {UpsertFaqDto} body
         * @param {string} merchantId
         * @param {string} faqId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardControllerUpdateMerchantFaq: function (body, merchantId, faqId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.MerchantsApiAxiosParamCreator)(configuration).dashboardControllerUpdateMerchantFaq(body, merchantId, faqId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Upsert merchant social media info
         * @param {UpsertSocialMediaDto} body
         * @param {string} merchantId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardControllerUpsertMerchantSocials: function (body, merchantId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.MerchantsApiAxiosParamCreator)(configuration).dashboardControllerUpsertMerchantSocials(body, merchantId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get merchant info
         * @param {string} slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantsControllerGetMerchant: function (slug, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.MerchantsApiAxiosParamCreator)(configuration).merchantsControllerGetMerchant(slug, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get slug availablity
         * @param {string} slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantsControllerGetSlug: function (slug, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.MerchantsApiAxiosParamCreator)(configuration).merchantsControllerGetSlug(slug, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.MerchantsApiFp = MerchantsApiFp;
/**
 * MerchantsApi - factory interface
 * @export
 */
var MerchantsApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Create a link for a plan
         * @param {CreateLinkDto} body
         * @param {string} merchantId
         * @param {string} productId
         * @param {string} planId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardControllerCreateLink: function (body, merchantId, productId, planId, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, exports.MerchantsApiFp)(configuration).dashboardControllerCreateLink(body, merchantId, productId, planId, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         *
         * @summary Create merchant FAQ info
         * @param {UpsertFaqDto} body
         * @param {string} merchantId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardControllerCreateMerchantFaq: function (body, merchantId, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, exports.MerchantsApiFp)(configuration).dashboardControllerCreateMerchantFaq(body, merchantId, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         *
         * @summary Create a plan for a product
         * @param {CreatePlanDto} body
         * @param {string} merchantId
         * @param {string} productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardControllerCreatePlan: function (body, merchantId, productId, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, exports.MerchantsApiFp)(configuration).dashboardControllerCreatePlan(body, merchantId, productId, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         *
         * @summary Create new product for a merchant
         * @param {CreateProductDto} body
         * @param {string} merchantId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardControllerCreateProduct: function (body, merchantId, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, exports.MerchantsApiFp)(configuration).dashboardControllerCreateProduct(body, merchantId, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         *
         * @summary Delete merchant FAQ info
         * @param {string} merchantId
         * @param {string} faqId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardControllerDeleteMerchantFaq: function (merchantId, faqId, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, exports.MerchantsApiFp)(configuration).dashboardControllerDeleteMerchantFaq(merchantId, faqId, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         *
         * @summary Get all integrations for a merchant
         * @param {string} merchantId
         * @param {number} [page] Page number for pagination
         * @param {number} [limit] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardControllerGetAllIntegrations: function (merchantId, page, limit, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, exports.MerchantsApiFp)(configuration).dashboardControllerGetAllIntegrations(merchantId, page, limit, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         *
         * @summary Get all links for a merchant
         * @param {string} merchantId
         * @param {number} [page] Page number for pagination
         * @param {number} [limit] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardControllerGetAllLinks: function (merchantId, page, limit, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, exports.MerchantsApiFp)(configuration).dashboardControllerGetAllLinks(merchantId, page, limit, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         *
         * @summary Get specific integration for a merchant
         * @param {string} merchantId
         * @param {string} integrationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardControllerGetIntegration: function (merchantId, integrationId, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, exports.MerchantsApiFp)(configuration).dashboardControllerGetIntegration(merchantId, integrationId, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         *
         * @summary Get a specific link for a plan
         * @param {string} merchantId
         * @param {string} productId
         * @param {string} planId
         * @param {string} linkId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardControllerGetLink: function (merchantId, productId, planId, linkId, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, exports.MerchantsApiFp)(configuration).dashboardControllerGetLink(merchantId, productId, planId, linkId, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         *
         * @summary Get all links for a plan
         * @param {string} merchantId
         * @param {string} productId
         * @param {string} planId
         * @param {number} [page] Page number for pagination
         * @param {number} [limit] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardControllerGetLinks: function (merchantId, productId, planId, page, limit, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, exports.MerchantsApiFp)(configuration).dashboardControllerGetLinks(merchantId, productId, planId, page, limit, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         *
         * @summary Get merchant info
         * @param {string} merchantId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardControllerGetMerchant: function (merchantId, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, exports.MerchantsApiFp)(configuration).dashboardControllerGetMerchant(merchantId, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         *
         * @summary Get all plans for a product
         * @param {string} merchantId
         * @param {string} productId
         * @param {number} [page] Page number for pagination
         * @param {number} [limit] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardControllerGetPlans: function (merchantId, productId, page, limit, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, exports.MerchantsApiFp)(configuration).dashboardControllerGetPlans(merchantId, productId, page, limit, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         *
         * @summary Get a specific product
         * @param {string} merchantId
         * @param {string} productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardControllerGetProduct: function (merchantId, productId, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, exports.MerchantsApiFp)(configuration).dashboardControllerGetProduct(merchantId, productId, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         *
         * @summary Get products owned by a merchant
         * @param {string} merchantId
         * @param {number} [page] Page number for pagination
         * @param {number} [limit] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardControllerGetProducts: function (merchantId, page, limit, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, exports.MerchantsApiFp)(configuration).dashboardControllerGetProducts(merchantId, page, limit, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         *
         * @summary Update specific integration for a merchant
         * @param {UpdateIntegrationDto} body
         * @param {string} merchantId
         * @param {string} integrationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardControllerUpdateIntegration: function (body, merchantId, integrationId, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, exports.MerchantsApiFp)(configuration).dashboardControllerUpdateIntegration(body, merchantId, integrationId, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         *
         * @summary Update merchant info
         * @param {UpdateMerchantDto} body
         * @param {string} merchantId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardControllerUpdateMerchant: function (body, merchantId, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, exports.MerchantsApiFp)(configuration).dashboardControllerUpdateMerchant(body, merchantId, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         *
         * @summary Update merchant FAQ info
         * @param {UpsertFaqDto} body
         * @param {string} merchantId
         * @param {string} faqId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardControllerUpdateMerchantFaq: function (body, merchantId, faqId, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, exports.MerchantsApiFp)(configuration).dashboardControllerUpdateMerchantFaq(body, merchantId, faqId, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         *
         * @summary Upsert merchant social media info
         * @param {UpsertSocialMediaDto} body
         * @param {string} merchantId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardControllerUpsertMerchantSocials: function (body, merchantId, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, exports.MerchantsApiFp)(configuration).dashboardControllerUpsertMerchantSocials(body, merchantId, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         *
         * @summary Get merchant info
         * @param {string} slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantsControllerGetMerchant: function (slug, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, exports.MerchantsApiFp)(configuration).merchantsControllerGetMerchant(slug, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
        /**
         *
         * @summary Get slug availablity
         * @param {string} slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantsControllerGetSlug: function (slug, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, exports.MerchantsApiFp)(configuration).merchantsControllerGetSlug(slug, options).then(function (request) { return request(axios, basePath); })];
                });
            });
        },
    };
};
exports.MerchantsApiFactory = MerchantsApiFactory;
/**
 * MerchantsApi - object-oriented interface
 * @export
 * @class MerchantsApi
 * @extends {BaseAPI}
 */
var MerchantsApi = /** @class */ (function (_super) {
    __extends(MerchantsApi, _super);
    function MerchantsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Create a link for a plan
     * @param {CreateLinkDto} body
     * @param {string} merchantId
     * @param {string} productId
     * @param {string} planId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    MerchantsApi.prototype.dashboardControllerCreateLink = function (body, merchantId, productId, planId, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, exports.MerchantsApiFp)(this.configuration).dashboardControllerCreateLink(body, merchantId, productId, planId, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     *
     * @summary Create merchant FAQ info
     * @param {UpsertFaqDto} body
     * @param {string} merchantId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    MerchantsApi.prototype.dashboardControllerCreateMerchantFaq = function (body, merchantId, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, exports.MerchantsApiFp)(this.configuration).dashboardControllerCreateMerchantFaq(body, merchantId, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     *
     * @summary Create a plan for a product
     * @param {CreatePlanDto} body
     * @param {string} merchantId
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    MerchantsApi.prototype.dashboardControllerCreatePlan = function (body, merchantId, productId, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, exports.MerchantsApiFp)(this.configuration).dashboardControllerCreatePlan(body, merchantId, productId, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     *
     * @summary Create new product for a merchant
     * @param {CreateProductDto} body
     * @param {string} merchantId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    MerchantsApi.prototype.dashboardControllerCreateProduct = function (body, merchantId, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, exports.MerchantsApiFp)(this.configuration).dashboardControllerCreateProduct(body, merchantId, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     *
     * @summary Delete merchant FAQ info
     * @param {string} merchantId
     * @param {string} faqId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    MerchantsApi.prototype.dashboardControllerDeleteMerchantFaq = function (merchantId, faqId, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, exports.MerchantsApiFp)(this.configuration).dashboardControllerDeleteMerchantFaq(merchantId, faqId, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     *
     * @summary Get all integrations for a merchant
     * @param {string} merchantId
     * @param {number} [page] Page number for pagination
     * @param {number} [limit] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    MerchantsApi.prototype.dashboardControllerGetAllIntegrations = function (merchantId, page, limit, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, exports.MerchantsApiFp)(this.configuration).dashboardControllerGetAllIntegrations(merchantId, page, limit, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     *
     * @summary Get all links for a merchant
     * @param {string} merchantId
     * @param {number} [page] Page number for pagination
     * @param {number} [limit] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    MerchantsApi.prototype.dashboardControllerGetAllLinks = function (merchantId, page, limit, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, exports.MerchantsApiFp)(this.configuration).dashboardControllerGetAllLinks(merchantId, page, limit, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     *
     * @summary Get specific integration for a merchant
     * @param {string} merchantId
     * @param {string} integrationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    MerchantsApi.prototype.dashboardControllerGetIntegration = function (merchantId, integrationId, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, exports.MerchantsApiFp)(this.configuration).dashboardControllerGetIntegration(merchantId, integrationId, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     *
     * @summary Get a specific link for a plan
     * @param {string} merchantId
     * @param {string} productId
     * @param {string} planId
     * @param {string} linkId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    MerchantsApi.prototype.dashboardControllerGetLink = function (merchantId, productId, planId, linkId, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, exports.MerchantsApiFp)(this.configuration).dashboardControllerGetLink(merchantId, productId, planId, linkId, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     *
     * @summary Get all links for a plan
     * @param {string} merchantId
     * @param {string} productId
     * @param {string} planId
     * @param {number} [page] Page number for pagination
     * @param {number} [limit] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    MerchantsApi.prototype.dashboardControllerGetLinks = function (merchantId, productId, planId, page, limit, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, exports.MerchantsApiFp)(this.configuration).dashboardControllerGetLinks(merchantId, productId, planId, page, limit, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     *
     * @summary Get merchant info
     * @param {string} merchantId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    MerchantsApi.prototype.dashboardControllerGetMerchant = function (merchantId, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, exports.MerchantsApiFp)(this.configuration).dashboardControllerGetMerchant(merchantId, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     *
     * @summary Get all plans for a product
     * @param {string} merchantId
     * @param {string} productId
     * @param {number} [page] Page number for pagination
     * @param {number} [limit] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    MerchantsApi.prototype.dashboardControllerGetPlans = function (merchantId, productId, page, limit, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, exports.MerchantsApiFp)(this.configuration).dashboardControllerGetPlans(merchantId, productId, page, limit, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     *
     * @summary Get a specific product
     * @param {string} merchantId
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    MerchantsApi.prototype.dashboardControllerGetProduct = function (merchantId, productId, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, exports.MerchantsApiFp)(this.configuration).dashboardControllerGetProduct(merchantId, productId, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     *
     * @summary Get products owned by a merchant
     * @param {string} merchantId
     * @param {number} [page] Page number for pagination
     * @param {number} [limit] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    MerchantsApi.prototype.dashboardControllerGetProducts = function (merchantId, page, limit, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, exports.MerchantsApiFp)(this.configuration).dashboardControllerGetProducts(merchantId, page, limit, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     *
     * @summary Update specific integration for a merchant
     * @param {UpdateIntegrationDto} body
     * @param {string} merchantId
     * @param {string} integrationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    MerchantsApi.prototype.dashboardControllerUpdateIntegration = function (body, merchantId, integrationId, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, exports.MerchantsApiFp)(this.configuration).dashboardControllerUpdateIntegration(body, merchantId, integrationId, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     *
     * @summary Update merchant info
     * @param {UpdateMerchantDto} body
     * @param {string} merchantId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    MerchantsApi.prototype.dashboardControllerUpdateMerchant = function (body, merchantId, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, exports.MerchantsApiFp)(this.configuration).dashboardControllerUpdateMerchant(body, merchantId, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     *
     * @summary Update merchant FAQ info
     * @param {UpsertFaqDto} body
     * @param {string} merchantId
     * @param {string} faqId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    MerchantsApi.prototype.dashboardControllerUpdateMerchantFaq = function (body, merchantId, faqId, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, exports.MerchantsApiFp)(this.configuration).dashboardControllerUpdateMerchantFaq(body, merchantId, faqId, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     *
     * @summary Upsert merchant social media info
     * @param {UpsertSocialMediaDto} body
     * @param {string} merchantId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    MerchantsApi.prototype.dashboardControllerUpsertMerchantSocials = function (body, merchantId, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, exports.MerchantsApiFp)(this.configuration).dashboardControllerUpsertMerchantSocials(body, merchantId, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     *
     * @summary Get merchant info
     * @param {string} slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    MerchantsApi.prototype.merchantsControllerGetMerchant = function (slug, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, exports.MerchantsApiFp)(this.configuration).merchantsControllerGetMerchant(slug, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    /**
     *
     * @summary Get slug availablity
     * @param {string} slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    MerchantsApi.prototype.merchantsControllerGetSlug = function (slug, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, exports.MerchantsApiFp)(this.configuration).merchantsControllerGetSlug(slug, options).then(function (request) { return request(_this.axios, _this.basePath); })];
            });
        });
    };
    return MerchantsApi;
}(base_1.BaseAPI));
exports.MerchantsApi = MerchantsApi;
