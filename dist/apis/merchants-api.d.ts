/**
 * Rapid Pass API
 * API docs for Rapid Pass
 *
 * OpenAPI spec version: 0.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { CreateLinkDto } from '../models';
import { CreatePlanDto } from '../models';
import { CreateProductDto } from '../models';
import { FaqDto } from '../models';
import { IntegrationDto } from '../models';
import { LinkDto } from '../models';
import { MerchantDto } from '../models';
import { MerchantWithProductsDto } from '../models';
import { PaginatedIntegrationResponseDto } from '../models';
import { PaginatedLinkResponseDto } from '../models';
import { PaginatedPlanResponseDto } from '../models';
import { PaginatedProductResponseDto } from '../models';
import { PlanDto } from '../models';
import { ProductDto } from '../models';
import { UpdateIntegrationDto } from '../models';
import { UpdateMerchantDto } from '../models';
import { UpsertFaqDto } from '../models';
import { UpsertSocialMediaDto } from '../models';
/**
 * MerchantsApi - axios parameter creator
 * @export
 */
export declare const MerchantsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create a link for a plan
     * @param {CreateLinkDto} body
     * @param {string} merchantId
     * @param {string} productId
     * @param {string} planId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dashboardControllerCreateLink: (body: CreateLinkDto, merchantId: string, productId: string, planId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Create merchant FAQ info
     * @param {UpsertFaqDto} body
     * @param {string} merchantId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dashboardControllerCreateMerchantFaq: (body: UpsertFaqDto, merchantId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Create a plan for a product
     * @param {CreatePlanDto} body
     * @param {string} merchantId
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dashboardControllerCreatePlan: (body: CreatePlanDto, merchantId: string, productId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Create new product for a merchant
     * @param {CreateProductDto} body
     * @param {string} merchantId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dashboardControllerCreateProduct: (body: CreateProductDto, merchantId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete merchant FAQ info
     * @param {string} merchantId
     * @param {string} faqId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dashboardControllerDeleteMerchantFaq: (merchantId: string, faqId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get all integrations for a merchant
     * @param {string} merchantId
     * @param {number} [page] Page number for pagination
     * @param {number} [limit] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dashboardControllerGetAllIntegrations: (merchantId: string, page?: number, limit?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get all links for a merchant
     * @param {string} merchantId
     * @param {number} [page] Page number for pagination
     * @param {number} [limit] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dashboardControllerGetAllLinks: (merchantId: string, page?: number, limit?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get specific integration for a merchant
     * @param {string} merchantId
     * @param {string} integrationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dashboardControllerGetIntegration: (merchantId: string, integrationId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a specific link for a plan
     * @param {string} merchantId
     * @param {string} productId
     * @param {string} planId
     * @param {string} linkId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dashboardControllerGetLink: (merchantId: string, productId: string, planId: string, linkId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get all links for a plan
     * @param {string} merchantId
     * @param {string} productId
     * @param {string} planId
     * @param {number} [page] Page number for pagination
     * @param {number} [limit] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dashboardControllerGetLinks: (merchantId: string, productId: string, planId: string, page?: number, limit?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get merchant info
     * @param {string} merchantId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dashboardControllerGetMerchant: (merchantId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get all plans for a product
     * @param {string} merchantId
     * @param {string} productId
     * @param {number} [page] Page number for pagination
     * @param {number} [limit] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dashboardControllerGetPlans: (merchantId: string, productId: string, page?: number, limit?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a specific product
     * @param {string} merchantId
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dashboardControllerGetProduct: (merchantId: string, productId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get products owned by a merchant
     * @param {string} merchantId
     * @param {number} [page] Page number for pagination
     * @param {number} [limit] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dashboardControllerGetProducts: (merchantId: string, page?: number, limit?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update specific integration for a merchant
     * @param {UpdateIntegrationDto} body
     * @param {string} merchantId
     * @param {string} integrationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dashboardControllerUpdateIntegration: (body: UpdateIntegrationDto, merchantId: string, integrationId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update merchant info
     * @param {UpdateMerchantDto} body
     * @param {string} merchantId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dashboardControllerUpdateMerchant: (body: UpdateMerchantDto, merchantId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update merchant FAQ info
     * @param {UpsertFaqDto} body
     * @param {string} merchantId
     * @param {string} faqId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dashboardControllerUpdateMerchantFaq: (body: UpsertFaqDto, merchantId: string, faqId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Upsert merchant social media info
     * @param {UpsertSocialMediaDto} body
     * @param {string} merchantId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dashboardControllerUpsertMerchantSocials: (body: UpsertSocialMediaDto, merchantId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get merchant info
     * @param {string} merchantId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    merchantsControllerGetMerchant: (merchantId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get slug availablity
     * @param {string} slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    merchantsControllerGetSlug: (slug: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * MerchantsApi - functional programming interface
 * @export
 */
export declare const MerchantsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create a link for a plan
     * @param {CreateLinkDto} body
     * @param {string} merchantId
     * @param {string} productId
     * @param {string} planId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dashboardControllerCreateLink(body: CreateLinkDto, merchantId: string, productId: string, planId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<LinkDto>>>;
    /**
     *
     * @summary Create merchant FAQ info
     * @param {UpsertFaqDto} body
     * @param {string} merchantId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dashboardControllerCreateMerchantFaq(body: UpsertFaqDto, merchantId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<FaqDto>>>;
    /**
     *
     * @summary Create a plan for a product
     * @param {CreatePlanDto} body
     * @param {string} merchantId
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dashboardControllerCreatePlan(body: CreatePlanDto, merchantId: string, productId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PlanDto>>>;
    /**
     *
     * @summary Create new product for a merchant
     * @param {CreateProductDto} body
     * @param {string} merchantId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dashboardControllerCreateProduct(body: CreateProductDto, merchantId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ProductDto>>>;
    /**
     *
     * @summary Delete merchant FAQ info
     * @param {string} merchantId
     * @param {string} faqId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dashboardControllerDeleteMerchantFaq(merchantId: string, faqId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>>;
    /**
     *
     * @summary Get all integrations for a merchant
     * @param {string} merchantId
     * @param {number} [page] Page number for pagination
     * @param {number} [limit] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dashboardControllerGetAllIntegrations(merchantId: string, page?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PaginatedIntegrationResponseDto>>>;
    /**
     *
     * @summary Get all links for a merchant
     * @param {string} merchantId
     * @param {number} [page] Page number for pagination
     * @param {number} [limit] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dashboardControllerGetAllLinks(merchantId: string, page?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PaginatedLinkResponseDto>>>;
    /**
     *
     * @summary Get specific integration for a merchant
     * @param {string} merchantId
     * @param {string} integrationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dashboardControllerGetIntegration(merchantId: string, integrationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<IntegrationDto>>>;
    /**
     *
     * @summary Get a specific link for a plan
     * @param {string} merchantId
     * @param {string} productId
     * @param {string} planId
     * @param {string} linkId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dashboardControllerGetLink(merchantId: string, productId: string, planId: string, linkId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<LinkDto>>>;
    /**
     *
     * @summary Get all links for a plan
     * @param {string} merchantId
     * @param {string} productId
     * @param {string} planId
     * @param {number} [page] Page number for pagination
     * @param {number} [limit] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dashboardControllerGetLinks(merchantId: string, productId: string, planId: string, page?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PaginatedLinkResponseDto>>>;
    /**
     *
     * @summary Get merchant info
     * @param {string} merchantId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dashboardControllerGetMerchant(merchantId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<MerchantDto>>>;
    /**
     *
     * @summary Get all plans for a product
     * @param {string} merchantId
     * @param {string} productId
     * @param {number} [page] Page number for pagination
     * @param {number} [limit] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dashboardControllerGetPlans(merchantId: string, productId: string, page?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PaginatedPlanResponseDto>>>;
    /**
     *
     * @summary Get a specific product
     * @param {string} merchantId
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dashboardControllerGetProduct(merchantId: string, productId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ProductDto>>>;
    /**
     *
     * @summary Get products owned by a merchant
     * @param {string} merchantId
     * @param {number} [page] Page number for pagination
     * @param {number} [limit] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dashboardControllerGetProducts(merchantId: string, page?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PaginatedProductResponseDto>>>;
    /**
     *
     * @summary Update specific integration for a merchant
     * @param {UpdateIntegrationDto} body
     * @param {string} merchantId
     * @param {string} integrationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dashboardControllerUpdateIntegration(body: UpdateIntegrationDto, merchantId: string, integrationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<IntegrationDto>>>;
    /**
     *
     * @summary Update merchant info
     * @param {UpdateMerchantDto} body
     * @param {string} merchantId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dashboardControllerUpdateMerchant(body: UpdateMerchantDto, merchantId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<MerchantDto>>>;
    /**
     *
     * @summary Update merchant FAQ info
     * @param {UpsertFaqDto} body
     * @param {string} merchantId
     * @param {string} faqId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dashboardControllerUpdateMerchantFaq(body: UpsertFaqDto, merchantId: string, faqId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<FaqDto>>>;
    /**
     *
     * @summary Upsert merchant social media info
     * @param {UpsertSocialMediaDto} body
     * @param {string} merchantId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dashboardControllerUpsertMerchantSocials(body: UpsertSocialMediaDto, merchantId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<UpsertSocialMediaDto>>>;
    /**
     *
     * @summary Get merchant info
     * @param {string} merchantId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    merchantsControllerGetMerchant(merchantId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<MerchantWithProductsDto>>>;
    /**
     *
     * @summary Get slug availablity
     * @param {string} slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    merchantsControllerGetSlug(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>>;
};
/**
 * MerchantsApi - factory interface
 * @export
 */
export declare const MerchantsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create a link for a plan
     * @param {CreateLinkDto} body
     * @param {string} merchantId
     * @param {string} productId
     * @param {string} planId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dashboardControllerCreateLink(body: CreateLinkDto, merchantId: string, productId: string, planId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<LinkDto>>;
    /**
     *
     * @summary Create merchant FAQ info
     * @param {UpsertFaqDto} body
     * @param {string} merchantId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dashboardControllerCreateMerchantFaq(body: UpsertFaqDto, merchantId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<FaqDto>>;
    /**
     *
     * @summary Create a plan for a product
     * @param {CreatePlanDto} body
     * @param {string} merchantId
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dashboardControllerCreatePlan(body: CreatePlanDto, merchantId: string, productId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<PlanDto>>;
    /**
     *
     * @summary Create new product for a merchant
     * @param {CreateProductDto} body
     * @param {string} merchantId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dashboardControllerCreateProduct(body: CreateProductDto, merchantId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ProductDto>>;
    /**
     *
     * @summary Delete merchant FAQ info
     * @param {string} merchantId
     * @param {string} faqId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dashboardControllerDeleteMerchantFaq(merchantId: string, faqId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
    /**
     *
     * @summary Get all integrations for a merchant
     * @param {string} merchantId
     * @param {number} [page] Page number for pagination
     * @param {number} [limit] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dashboardControllerGetAllIntegrations(merchantId: string, page?: number, limit?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<PaginatedIntegrationResponseDto>>;
    /**
     *
     * @summary Get all links for a merchant
     * @param {string} merchantId
     * @param {number} [page] Page number for pagination
     * @param {number} [limit] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dashboardControllerGetAllLinks(merchantId: string, page?: number, limit?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<PaginatedLinkResponseDto>>;
    /**
     *
     * @summary Get specific integration for a merchant
     * @param {string} merchantId
     * @param {string} integrationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dashboardControllerGetIntegration(merchantId: string, integrationId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<IntegrationDto>>;
    /**
     *
     * @summary Get a specific link for a plan
     * @param {string} merchantId
     * @param {string} productId
     * @param {string} planId
     * @param {string} linkId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dashboardControllerGetLink(merchantId: string, productId: string, planId: string, linkId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<LinkDto>>;
    /**
     *
     * @summary Get all links for a plan
     * @param {string} merchantId
     * @param {string} productId
     * @param {string} planId
     * @param {number} [page] Page number for pagination
     * @param {number} [limit] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dashboardControllerGetLinks(merchantId: string, productId: string, planId: string, page?: number, limit?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<PaginatedLinkResponseDto>>;
    /**
     *
     * @summary Get merchant info
     * @param {string} merchantId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dashboardControllerGetMerchant(merchantId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<MerchantDto>>;
    /**
     *
     * @summary Get all plans for a product
     * @param {string} merchantId
     * @param {string} productId
     * @param {number} [page] Page number for pagination
     * @param {number} [limit] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dashboardControllerGetPlans(merchantId: string, productId: string, page?: number, limit?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<PaginatedPlanResponseDto>>;
    /**
     *
     * @summary Get a specific product
     * @param {string} merchantId
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dashboardControllerGetProduct(merchantId: string, productId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ProductDto>>;
    /**
     *
     * @summary Get products owned by a merchant
     * @param {string} merchantId
     * @param {number} [page] Page number for pagination
     * @param {number} [limit] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dashboardControllerGetProducts(merchantId: string, page?: number, limit?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<PaginatedProductResponseDto>>;
    /**
     *
     * @summary Update specific integration for a merchant
     * @param {UpdateIntegrationDto} body
     * @param {string} merchantId
     * @param {string} integrationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dashboardControllerUpdateIntegration(body: UpdateIntegrationDto, merchantId: string, integrationId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<IntegrationDto>>;
    /**
     *
     * @summary Update merchant info
     * @param {UpdateMerchantDto} body
     * @param {string} merchantId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dashboardControllerUpdateMerchant(body: UpdateMerchantDto, merchantId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<MerchantDto>>;
    /**
     *
     * @summary Update merchant FAQ info
     * @param {UpsertFaqDto} body
     * @param {string} merchantId
     * @param {string} faqId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dashboardControllerUpdateMerchantFaq(body: UpsertFaqDto, merchantId: string, faqId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<FaqDto>>;
    /**
     *
     * @summary Upsert merchant social media info
     * @param {UpsertSocialMediaDto} body
     * @param {string} merchantId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dashboardControllerUpsertMerchantSocials(body: UpsertSocialMediaDto, merchantId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<UpsertSocialMediaDto>>;
    /**
     *
     * @summary Get merchant info
     * @param {string} merchantId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    merchantsControllerGetMerchant(merchantId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<MerchantWithProductsDto>>;
    /**
     *
     * @summary Get slug availablity
     * @param {string} slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    merchantsControllerGetSlug(slug: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
};
/**
 * MerchantsApi - object-oriented interface
 * @export
 * @class MerchantsApi
 * @extends {BaseAPI}
 */
export declare class MerchantsApi extends BaseAPI {
    /**
     *
     * @summary Create a link for a plan
     * @param {CreateLinkDto} body
     * @param {string} merchantId
     * @param {string} productId
     * @param {string} planId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    dashboardControllerCreateLink(body: CreateLinkDto, merchantId: string, productId: string, planId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<LinkDto>>;
    /**
     *
     * @summary Create merchant FAQ info
     * @param {UpsertFaqDto} body
     * @param {string} merchantId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    dashboardControllerCreateMerchantFaq(body: UpsertFaqDto, merchantId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<FaqDto>>;
    /**
     *
     * @summary Create a plan for a product
     * @param {CreatePlanDto} body
     * @param {string} merchantId
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    dashboardControllerCreatePlan(body: CreatePlanDto, merchantId: string, productId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<PlanDto>>;
    /**
     *
     * @summary Create new product for a merchant
     * @param {CreateProductDto} body
     * @param {string} merchantId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    dashboardControllerCreateProduct(body: CreateProductDto, merchantId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ProductDto>>;
    /**
     *
     * @summary Delete merchant FAQ info
     * @param {string} merchantId
     * @param {string} faqId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    dashboardControllerDeleteMerchantFaq(merchantId: string, faqId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
    /**
     *
     * @summary Get all integrations for a merchant
     * @param {string} merchantId
     * @param {number} [page] Page number for pagination
     * @param {number} [limit] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    dashboardControllerGetAllIntegrations(merchantId: string, page?: number, limit?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<PaginatedIntegrationResponseDto>>;
    /**
     *
     * @summary Get all links for a merchant
     * @param {string} merchantId
     * @param {number} [page] Page number for pagination
     * @param {number} [limit] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    dashboardControllerGetAllLinks(merchantId: string, page?: number, limit?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<PaginatedLinkResponseDto>>;
    /**
     *
     * @summary Get specific integration for a merchant
     * @param {string} merchantId
     * @param {string} integrationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    dashboardControllerGetIntegration(merchantId: string, integrationId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<IntegrationDto>>;
    /**
     *
     * @summary Get a specific link for a plan
     * @param {string} merchantId
     * @param {string} productId
     * @param {string} planId
     * @param {string} linkId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    dashboardControllerGetLink(merchantId: string, productId: string, planId: string, linkId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<LinkDto>>;
    /**
     *
     * @summary Get all links for a plan
     * @param {string} merchantId
     * @param {string} productId
     * @param {string} planId
     * @param {number} [page] Page number for pagination
     * @param {number} [limit] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    dashboardControllerGetLinks(merchantId: string, productId: string, planId: string, page?: number, limit?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<PaginatedLinkResponseDto>>;
    /**
     *
     * @summary Get merchant info
     * @param {string} merchantId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    dashboardControllerGetMerchant(merchantId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<MerchantDto>>;
    /**
     *
     * @summary Get all plans for a product
     * @param {string} merchantId
     * @param {string} productId
     * @param {number} [page] Page number for pagination
     * @param {number} [limit] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    dashboardControllerGetPlans(merchantId: string, productId: string, page?: number, limit?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<PaginatedPlanResponseDto>>;
    /**
     *
     * @summary Get a specific product
     * @param {string} merchantId
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    dashboardControllerGetProduct(merchantId: string, productId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ProductDto>>;
    /**
     *
     * @summary Get products owned by a merchant
     * @param {string} merchantId
     * @param {number} [page] Page number for pagination
     * @param {number} [limit] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    dashboardControllerGetProducts(merchantId: string, page?: number, limit?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<PaginatedProductResponseDto>>;
    /**
     *
     * @summary Update specific integration for a merchant
     * @param {UpdateIntegrationDto} body
     * @param {string} merchantId
     * @param {string} integrationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    dashboardControllerUpdateIntegration(body: UpdateIntegrationDto, merchantId: string, integrationId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<IntegrationDto>>;
    /**
     *
     * @summary Update merchant info
     * @param {UpdateMerchantDto} body
     * @param {string} merchantId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    dashboardControllerUpdateMerchant(body: UpdateMerchantDto, merchantId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<MerchantDto>>;
    /**
     *
     * @summary Update merchant FAQ info
     * @param {UpsertFaqDto} body
     * @param {string} merchantId
     * @param {string} faqId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    dashboardControllerUpdateMerchantFaq(body: UpsertFaqDto, merchantId: string, faqId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<FaqDto>>;
    /**
     *
     * @summary Upsert merchant social media info
     * @param {UpsertSocialMediaDto} body
     * @param {string} merchantId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    dashboardControllerUpsertMerchantSocials(body: UpsertSocialMediaDto, merchantId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<UpsertSocialMediaDto>>;
    /**
     *
     * @summary Get merchant info
     * @param {string} merchantId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    merchantsControllerGetMerchant(merchantId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<MerchantWithProductsDto>>;
    /**
     *
     * @summary Get slug availablity
     * @param {string} slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    merchantsControllerGetSlug(slug: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
}
